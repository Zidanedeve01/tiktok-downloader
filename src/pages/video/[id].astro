---
export const prerender = false;
import Layout from '../../layouts/Layout.astro';
import { VPS_CONFIG } from '../../utils/config.ts';
import { formatNumber, formatFileSize } from '../../utils/api.ts';
import Notifications from '../../components/Notifications.astro';
let { id } = Astro.params;
let videoInfo = null;
let errorMessage = null;
if (id) {
  try {
    let backendUrl = await VPS_CONFIG.getBackendUrl();
    let apiUrl = `${backendUrl}/api/download/${id}`;
    let response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36'
      },
      signal: AbortSignal.timeout(30000)
    });
    let result = await response.json();
    if (result.success) {
      videoInfo = result.data;
    } else {
      errorMessage = result.error;
    }
  } catch (error) {
    errorMessage = 'Terjadi kesalahan saat memproses video';
  }
}
---
<Layout title={`Download Video ${id} - TikTok Downloader`}>
  <section class="relative min-h-screen bg-black overflow-hidden">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 py-8 sm:py-12 lg:py-16 xl:py-20 2xl:py-24 relative z-10">
      <div class="max-w-7xl xl:max-w-6xl 2xl:max-w-6xl mx-auto">
        <div class="mb-8 sm:mb-12 lg:mb-16">
          <div class="relative bg-black border border-white rounded-xl sm:rounded-2xl lg:rounded-3xl p-6 sm:p-8 lg:p-10 xl:p-12">
            <div class="flex flex-col lg:flex-row items-start lg:items-center justify-between mb-6 lg:mb-8 gap-4 lg:gap-6">
              <div class="flex-1">
                <h1 class="text-3xl sm:text-4xl lg:text-5xl xl:text-5xl 2xl:text-5xl font-black text-white mb-3 lg:mb-4">
                  <span class="text-white">
                    Download
                  </span>
                  <span class="text-white">
                    Video
                  </span>
                </h1>
                <p class="text-white/80 text-base sm:text-lg lg:text-lg xl:text-lg 2xl:text-lg">
                  Video ID: <span class="text-white font-bold">{id}</span>
                </p>
              </div>
              <a href="/" class="bg-white hover:bg-white/90 text-black px-6 lg:px-8 xl:px-8 py-3 lg:py-4 xl:py-4 rounded-xl lg:rounded-2xl font-bold transition-all duration-300 flex items-center gap-3 border border-white text-base lg:text-lg xl:text-lg">
                <i class="fas fa-arrow-left text-lg lg:text-xl xl:text-xl"></i>
                <span>Kembali ke Home</span>
              </a>
            </div>
          </div>
        </div>
        {errorMessage && (
          <div class="relative mb-8 sm:mb-12 lg:mb-16">
            <div class="relative bg-black border border-red-500 rounded-xl sm:rounded-2xl lg:rounded-3xl p-6 sm:p-8 lg:p-10">
              <div class="flex items-center gap-3 lg:gap-4 mb-4 lg:mb-6">
                <i class="fas fa-exclamation-triangle text-red-400 text-xl lg:text-2xl"></i>
                <h3 class="text-red-400 text-xl lg:text-2xl font-bold">Error</h3>
              </div>
              <p class="text-red-300 text-base lg:text-lg">{errorMessage}</p>
            </div>
          </div>
        )}
        {videoInfo && (
          <div class="relative mb-8 sm:mb-12 lg:mb-16">
            <div class="relative bg-black border border-white rounded-xl sm:rounded-2xl lg:rounded-3xl p-6 sm:p-8 lg:p-10 xl:p-12">
              <div class="flex flex-col lg:flex-row gap-8 lg:gap-12 xl:gap-16">
                <div class="flex-shrink-0 lg:w-1/3 xl:w-2/5">
                  <div class="relative group">
                    <img 
                      src={videoInfo.thumbnail} 
                      alt={videoInfo.title || 'Video Thumbnail'}
                      class="w-full h-64 lg:h-80 xl:h-96 object-cover rounded-xl sm:rounded-2xl lg:rounded-3xl border border-white group-hover:border-white transition-all duration-300"
                    />
                    <div class="absolute inset-0 bg-black/20 rounded-xl sm:rounded-2xl lg:rounded-3xl opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center">
                      <div class="bg-white rounded-full p-4 lg:p-6">
                        <i class="fas fa-play text-black text-xl lg:text-2xl"></i>
                      </div>
                    </div>
                  </div>
                  <div class="mt-6 flex flex-wrap gap-3">
                    <span class="bg-white text-black px-4 py-2 rounded-full text-sm lg:text-base font-medium">
                      <i class="fas fa-clock mr-2"></i>
                      {videoInfo.duration}
                    </span>
                    <span class="bg-white text-black px-4 py-2 rounded-full text-sm lg:text-base font-medium">
                      <i class="fas fa-weight mr-2"></i>
                      {formatFileSize(videoInfo.sizeMedia)}
                    </span>
                    {videoInfo.region && (
                      <span class="bg-white text-black px-4 py-2 rounded-full text-sm lg:text-base font-medium">
                        <i class="fas fa-globe mr-2"></i>
                        {videoInfo.region}
                      </span>
                    )}
                  </div>
                </div>
                <div class="flex-1">
                  <h2 class="text-3xl sm:text-4xl lg:text-4xl xl:text-4xl 2xl:text-4xl font-bold text-white mb-6 lg:mb-8 leading-tight">
                    {videoInfo.title || 'No Title'}
                  </h2>
                  <div class="mb-8 lg:mb-10">
                    <div class="flex items-center gap-4 lg:gap-6 mb-4 lg:mb-6">
                      <img 
                        src={videoInfo.author?.profile_images} 
                        alt={videoInfo.author?.name}
                        class="w-12 h-12 lg:w-16 lg:h-16 rounded-full border border-white"
                      />
                      <div>
                        <p class="text-white font-semibold text-lg lg:text-lg xl:text-lg 2xl:text-lg">{videoInfo.author?.name || 'Unknown'}</p>
                        <p class="text-white/60 text-base lg:text-base xl:text-base 2xl:text-base">@{videoInfo.author?.nickname || 'unknown'}</p>
                      </div>
                    </div>
                  </div>
                  <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-8 lg:mb-10">
                    <div class="bg-black border border-white rounded-xl lg:rounded-2xl p-4 lg:p-6 text-center">
                      <i class="fas fa-eye text-white mb-3 lg:mb-4 text-lg lg:text-lg xl:text-lg"></i>
                      <p class="text-white font-bold text-xl lg:text-xl xl:text-xl 2xl:text-xl">{formatNumber(videoInfo.stats?.views || 0)}</p>
                      <p class="text-white/60 text-sm lg:text-sm xl:text-sm 2xl:text-sm">Views</p>
                    </div>
                    <div class="bg-black border border-white rounded-xl lg:rounded-2xl p-4 lg:p-6 text-center">
                      <i class="fas fa-heart text-white mb-3 lg:mb-4 text-lg lg:text-lg xl:text-lg"></i>
                      <p class="text-white font-bold text-xl lg:text-xl xl:text-xl 2xl:text-xl">{formatNumber(videoInfo.stats?.likes || 0)}</p>
                      <p class="text-white/60 text-sm lg:text-sm xl:text-sm 2xl:text-sm">Likes</p>
                    </div>
                    <div class="bg-black border border-white rounded-xl lg:rounded-2xl p-4 lg:p-6 text-center">
                      <i class="fas fa-comment text-white mb-3 lg:mb-4 text-lg lg:text-lg xl:text-lg"></i>
                      <p class="text-white font-bold text-xl lg:text-xl xl:text-xl 2xl:text-xl">{formatNumber(videoInfo.stats?.comments || 0)}</p>
                      <p class="text-white/60 text-sm lg:text-sm xl:text-sm 2xl:text-sm">Comments</p>
                    </div>
                    <div class="bg-black border border-white rounded-xl lg:rounded-2xl p-4 lg:p-6 text-center">
                      <i class="fas fa-share text-white mb-3 lg:mb-4 text-lg lg:text-lg xl:text-lg"></i>
                      <p class="text-white font-bold text-xl lg:text-xl xl:text-xl 2xl:text-xl">{formatNumber(videoInfo.stats?.shares || 0)}</p>
                      <p class="text-white/60 text-sm lg:text-sm xl:text-sm 2xl:text-sm">Shares</p>
                    </div>
                  </div>
                  {videoInfo.music && (
                    <div class="bg-black border border-white rounded-xl lg:rounded-2xl p-4 lg:p-6 mb-6 lg:mb-8">
                      <h4 class="text-white font-semibold mb-3 lg:mb-4 flex items-center gap-2 lg:gap-3 text-lg lg:text-xl">
                        <i class="fas fa-music text-lg lg:text-xl"></i>
                        Music Info
                      </h4>
                      <p class="text-white/80 text-base lg:text-lg">{videoInfo.music.title}</p>
                      <p class="text-white/60 text-sm lg:text-base">by {videoInfo.music.author}</p>
                      {videoInfo.music.isOriginal && (
                        <span class="inline-block bg-white text-black px-3 py-1 rounded-full text-sm lg:text-base mt-3 font-medium">
                          Original Sound
                        </span>
                      )}
                    </div>
                  )}
                  <div class="bg-black border border-white rounded-xl lg:rounded-2xl p-4 lg:p-6 mb-6 lg:mb-8">
                    <h4 class="text-white font-semibold mb-4 lg:mb-6 flex items-center gap-2 lg:gap-3 text-lg lg:text-xl">
                      <i class="fas fa-info-circle text-lg lg:text-xl"></i>
                      Video Details
                    </h4>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6 text-base lg:text-lg">
                      <div class="flex justify-between">
                        <span class="text-white/60">Created:</span>
                        <span class="text-white font-medium">{videoInfo.created}</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-white/60">Duration:</span>
                        <span class="text-white font-medium">{videoInfo.duration}</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-white/60">Size:</span>
                        <span class="text-white font-medium">{formatFileSize(videoInfo.sizeMedia)}</span>
                      </div>
                      <div class="flex justify-between">
                        <span class="text-white/60">Region:</span>
                        <span class="text-white font-medium">{videoInfo.region || 'Unknown'}</span>
                      </div>
                    </div>
                  </div>
                  {videoInfo.isSlide ? (
                    <div class="space-y-6">
                      <div class="text-center">
                        <div class="inline-flex items-center gap-3 bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm border border-purple-500/30 px-6 py-3 rounded-2xl text-purple-200 font-semibold">
                          <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                            <i class="fas fa-images text-white text-sm"></i>
                          </div>
                          <span>TikTok Slide Collection</span>
                          <div class="bg-white/20 px-2 py-1 rounded-full text-xs">
                            {videoInfo.download?.length || 0} slides
                          </div>
                        </div>
                      </div>
                      <div class="bg-white/5 backdrop-blur-sm border border-white/10 rounded-2xl p-6">
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                          {videoInfo.download?.map((image, index) => (
                            <div class="group relative bg-white/5 border border-white/10 rounded-xl overflow-hidden hover:border-white/20 transition-all duration-300">
                              <div class="aspect-square relative overflow-hidden">
                                <img 
                                  src={image} 
                                  alt={`Slide ${index + 1}`}
                                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                                  loading="lazy"
                                />
                                <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                                <div class="absolute top-2 left-2 bg-black/80 backdrop-blur-sm text-white px-2 py-1 rounded-lg text-xs font-medium">
                                  Slide {index + 1}
                                </div>
                                <div class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                  <div class="bg-white/20 backdrop-blur-sm rounded-full p-2">
                                    <i class="fas fa-expand text-white text-sm"></i>
                                  </div>
                                </div>
                              </div>
                              <div class="p-4">
                                <button 
                                  class="w-full bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-4 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 download-btn flex items-center justify-center gap-2"
                                  data-type="slide-image"
                                  data-url={image}
                                  data-filename={`${(videoInfo.title || 'slide').replace(/[^a-zA-Z0-9]/g, '_')}_slide_${index + 1}.jpg`}
                                >
                                  <i class="fas fa-download"></i>
                                  <span class="btn-text">Download</span>
                                  <div class="download-progress hidden">
                                    <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                  </div>
                                </button>
                              </div>
                            </div>
                          ))}
                        </div>
                        <div class="border-t border-white/10 pt-6">
                          <div class="flex flex-col sm:flex-row gap-4 items-center justify-between">
                            <div class="text-center sm:text-left">
                              <h4 class="text-white font-semibold mb-1">Download All Slides</h4>
                              <p class="text-white/60 text-sm">Get all {videoInfo.download?.length || 0} slides in one click</p>
                            </div>
                            <button 
                              class="bg-gradient-to-r from-indigo-500 to-indigo-600 hover:from-indigo-600 hover:to-indigo-700 text-white px-8 py-4 rounded-xl font-bold transition-all duration-300 transform hover:scale-105 download-all-btn flex items-center justify-center gap-3 shadow-lg shadow-indigo-500/25"
                              data-images={JSON.stringify(videoInfo.download)}
                              data-filename-base={`${(videoInfo.title || 'slide').replace(/[^a-zA-Z0-9]/g, '_')}`}
                            >
                              <i class="fas fa-download text-lg"></i>
                              <span class="btn-text">Download All</span>
                              <div class="download-progress hidden">
                                <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                              </div>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div class="space-y-6">
                      <div class="text-center">
                        <div class="inline-flex items-center gap-3 bg-gradient-to-r from-green-500/20 to-blue-500/20 backdrop-blur-sm border border-green-500/30 px-6 py-3 rounded-2xl text-green-200 font-semibold">
                          <div class="w-8 h-8 bg-gradient-to-r from-green-500 to-blue-500 rounded-full flex items-center justify-center">
                            <i class="fas fa-video text-white text-sm"></i>
                          </div>
                          <span>TikTok Video</span>
                          <div class="bg-white/20 px-2 py-1 rounded-full text-xs">
                            HD Quality
                          </div>
                        </div>
                      </div>
                      <div class="bg-white/5 backdrop-blur-sm border border-white/10 rounded-2xl p-6">
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                          {videoInfo.download?.no_watermark && (
                            <div class="group relative bg-white/5 border border-white/10 rounded-xl p-6 hover:border-green-500/30 transition-all duration-300">
                              <div class="flex items-center gap-4 mb-4">
                                <div class="w-12 h-12 bg-white rounded-xl flex items-center justify-center">
                                  <i class="fas fa-download text-white text-lg"></i>
                                </div>
                                <div>
                                  <h4 class="text-white font-semibold text-lg">No Watermark</h4>
                                  <p class="text-white/60 text-sm">Clean video without TikTok branding</p>
                                </div>
                              </div>
                              <div class="space-y-3 mb-4">
                                <div class="flex items-center gap-2 text-white/80 text-sm">
                                  <i class="fas fa-check-circle text-white"></i>
                                  <span>Original quality preserved</span>
                                </div>
                                <div class="flex items-center gap-2 text-white/80 text-sm">
                                  <i class="fas fa-check-circle text-white"></i>
                                  <span>No TikTok watermark</span>
                                </div>
                                <div class="flex items-center gap-2 text-white/80 text-sm">
                                  <i class="fas fa-check-circle text-white"></i>
                                  <span>MP4 format</span>
                                </div>
                              </div>
                              <button 
                                class="w-full bg-white hover:bg-white/90 text-black border border-white px-6 py-4 rounded-xl font-bold transition-all duration-300 transform hover:scale-105 download-btn flex items-center justify-center gap-2"
                                data-type="no-watermark"
                                data-url={videoInfo.download.no_watermark}
                                data-filename={`${(videoInfo.title || 'video').replace(/[^a-zA-Z0-9]/g, '_')}_no_watermark.mp4`}
                              >
                                <i class="fas fa-download text-lg"></i>
                                <span class="btn-text">Download Clean Video</span>
                                <div class="download-progress hidden">
                                  <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                </div>
                              </button>
                            </div>
                          )}
                          {videoInfo.download?.watermark && (
                            <div class="group relative bg-white/5 border border-white/10 rounded-xl p-6 hover:border-blue-500/30 transition-all duration-300">
                              <div class="flex items-center gap-4 mb-4">
                                <div class="w-12 h-12 bg-black border border-white rounded-xl flex items-center justify-center">
                                  <i class="fas fa-download text-white text-lg"></i>
                                </div>
                                <div>
                                  <h4 class="text-white font-semibold text-lg">With Watermark</h4>
                                  <p class="text-white/60 text-sm">Original TikTok branded video</p>
                                </div>
                              </div>
                              <div class="space-y-3 mb-4">
                                <div class="flex items-center gap-2 text-white/80 text-sm">
                                  <i class="fas fa-check-circle text-white"></i>
                                  <span>Original TikTok format</span>
                                </div>
                                <div class="flex items-center gap-2 text-white/80 text-sm">
                                  <i class="fas fa-check-circle text-white"></i>
                                  <span>Includes TikTok branding</span>
                                </div>
                                <div class="flex items-center gap-2 text-white/80 text-sm">
                                  <i class="fas fa-check-circle text-white"></i>
                                  <span>MP4 format</span>
                                </div>
                              </div>
                              <button 
                                class="w-full bg-black hover:bg-white hover:text-black text-white border border-white px-6 py-4 rounded-xl font-bold transition-all duration-300 transform hover:scale-105 download-btn flex items-center justify-center gap-2"
                                data-type="watermark"
                                data-url={videoInfo.download.watermark}
                                data-filename={`${(videoInfo.title || 'video').replace(/[^a-zA-Z0-9]/g, '_')}_watermark.mp4`}
                              >
                                <i class="fas fa-download text-lg"></i>
                                <span class="btn-text">Download Original</span>
                                <div class="download-progress hidden">
                                  <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                </div>
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  </section>
  <Notifications />
  <script>
    function formatNumber(num) {
      const numValue = typeof num === 'string' ? parseInt(num.replace(/,/g, '')) : num;
      if (numValue >= 1000000) return (numValue / 1000000).toFixed(1) + 'M';
      if (numValue >= 1000) return (numValue / 1000).toFixed(1) + 'K';
      return numValue.toString();
    }
    function formatFileSize(bytes) {
      if (!bytes) return 'Unknown';
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    async function downloadVideo(url, filename) {
      try {
        let response = await fetch(url, {
          method: 'GET',
          headers: {
            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36'
          }
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        let blob = await response.blob();
        let downloadUrl = window.URL.createObjectURL(blob);
        let link = document.createElement('a');
        link.href = downloadUrl;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(downloadUrl);
        return true;
      } catch (error) {
        console.error('Download error:', error);
        return false;
      }
    }
    function showDownloadProgress(button, show) {
      let btnText = button.querySelector('.btn-text');
      let progress = button.querySelector('.download-progress');
      let icon = button.querySelector('i');
      if (show) {
        btnText.style.display = 'none';
        progress.classList.remove('hidden');
        icon.style.display = 'none';
        button.disabled = true;
        button.classList.add('opacity-75');
      } else {
        btnText.style.display = 'inline';
        progress.classList.add('hidden');
        icon.style.display = 'inline';
        button.disabled = false;
        button.classList.remove('opacity-75');
      }
    }
    async function downloadAllSlides(images, filenameBase) {
      let successCount = 0;
      let totalCount = images.length;
      for (let i = 0; i < images.length; i++) {
        let filename = `${filenameBase}_slide_${i + 1}.jpg`;
        let success = await downloadVideo(images[i], filename);
        if (success) successCount++;
        if (typeof showNotification !== 'undefined') {
          showNotification.loading(`Mengunduh slide ${i + 1}/${totalCount}...`, 0);
        }
      }
      return { successCount, totalCount };
    }
    document.addEventListener('DOMContentLoaded', () => {
      let downloadButtons = document.querySelectorAll('.download-btn');
      downloadButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
          e.preventDefault();
          let type = button.dataset.type;
          let url = button.dataset.url;
          let filename = button.dataset.filename;
          if (!url || !filename) {
            if (typeof showNotification !== 'undefined') {
              showNotification.error('URL atau filename tidak valid!', 3000);
            }
            return;
          }
          showDownloadProgress(button, true);
          let success = await downloadVideo(url, filename);
          showDownloadProgress(button, false);
          if (success) {
            if (typeof showNotification !== 'undefined') {
              showNotification.success(`Download berhasil! File: ${filename}`, 3000);
            }
          } else {
            if (typeof showNotification !== 'undefined') {
              showNotification.error('Download gagal! Silakan coba lagi.', 3000);
            }
          }
        });
      });
      let downloadAllButtons = document.querySelectorAll('.download-all-btn');
      downloadAllButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
          e.preventDefault();
          let images = JSON.parse(button.dataset.images);
          let filenameBase = button.dataset.filenameBase;
          if (!images || !Array.isArray(images) || images.length === 0) {
            if (typeof showNotification !== 'undefined') {
              showNotification.error('Tidak ada slide untuk diunduh!', 3000);
            }
            return;
          }
          showDownloadProgress(button, true);
          if (typeof showNotification !== 'undefined') {
            showNotification.loading(`Mengunduh ${images.length} slide...`, 0);
          }
          let result = await downloadAllSlides(images, filenameBase);
          showDownloadProgress(button, false);
          if (typeof showNotification !== 'undefined') {
            if (result.successCount === result.totalCount) {
              showNotification.success(`Semua slide berhasil diunduh! (${result.successCount}/${result.totalCount})`, 4000);
            } else if (result.successCount > 0) {
              showNotification.info(`Sebagian slide berhasil diunduh (${result.successCount}/${result.totalCount})`, 4000);
            } else {
              showNotification.error('Gagal mengunduh slide! Silakan coba lagi.', 3000);
            }
          }
        });
      });
    });
  </script>
</Layout>