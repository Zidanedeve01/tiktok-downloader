---
---
<div id="notification-container" class="fixed top-4 right-4 z-50 space-y-2 max-w-xs sm:max-w-sm"></div>
<script>
  class NotificationSystem {
    constructor() {
      this.container = document.getElementById('notification-container');
      this.notifications = new Map();
      this.maxNotifications = 5;
    }
    show(message, type = 'info', duration = 5000, options = {}) {
      let id = Date.now() + Math.random();
      let notification = this.createNotification(id, message, type, options, duration);
      this.container.appendChild(notification);
      this.notifications.set(id, notification);
      this.animateIn(notification);
      this.limitNotifications();
      if (duration > 0) {
        setTimeout(() => {
          this.hide(id);
        }, duration);
      }
      return id;
    }
    createNotification(id, message, type, options, duration = 5000) {
      let notification = document.createElement('div');
      notification.id = `notification-${id}`;
      notification.className = `notification-item transform translate-x-full opacity-0 transition-all duration-300 ease-out`;
      let icons = {
        success: 'fas fa-check-circle',
        error: 'fas fa-exclamation-circle',
        warning: 'fas fa-exclamation-triangle',
        info: 'fas fa-info-circle',
        loading: 'fas fa-spinner fa-spin'
      };
      let colors = {
        success: 'bg-white',
        error: 'bg-white',
        warning: 'bg-white',
        info: 'bg-white',
        loading: 'bg-white'
      };
      let iconColors = {
        success: 'text-black',
        error: 'text-black',
        warning: 'text-black',
        info: 'text-black',
        loading: 'text-black'
      };
      notification.innerHTML = `
        <div class="bg-black border border-white rounded-lg sm:rounded-xl p-2 sm:p-3 shadow-2xl relative overflow-hidden">
          <div class="relative flex items-start gap-2">
            <div class="flex-shrink-0 mt-0.5">
              <i class="${icons[type]} ${iconColors[type]} text-xs sm:text-sm"></i>
            </div>
            <div class="flex-1 min-w-0">
              <p class="text-white font-medium text-xs sm:text-sm leading-relaxed">${message}</p>
              ${options.details ? `<p class="text-white/70 text-xs mt-1">${options.details}</p>` : ''}
            </div>
            <button class="flex-shrink-0 text-white/50 hover:text-white/80 transition-colors duration-200 ml-1" onclick="notificationSystem.hide('${id}')">
              <i class="fas fa-times text-xs"></i>
            </button>
          </div>
          ${duration && duration > 0 ? `<div class="absolute bottom-0 left-0 h-0.5 bg-white/20 rounded-full overflow-hidden">
            <div class="h-full bg-white/40 rounded-full notification-progress" style="animation: progress ${duration}ms linear forwards;"></div>
          </div>` : ''}
        </div>
      `;
      return notification;
    }
    animateIn(notification) {
      setTimeout(() => {
        notification.classList.remove('translate-x-full', 'opacity-0');
        notification.classList.add('translate-x-0', 'opacity-100');
      }, 10);
    }
    animateOut(notification) {
      notification.classList.add('translate-x-full', 'opacity-0');
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }
    hide(id) {
      let notification = this.notifications.get(id);
      if (notification) {
        this.animateOut(notification);
        this.notifications.delete(id);
      }
    }
    hideAll() {
      this.notifications.forEach((notification, id) => {
        this.hide(id);
      });
    }
    limitNotifications() {
      if (this.notifications.size > this.maxNotifications) {
        let oldestId = this.notifications.keys().next().value;
        this.hide(oldestId);
      }
    }
    success(message, duration = 5000, options = {}) {
      return this.show(message, 'success', duration, options);
    }
    error(message, duration = 7000, options = {}) {
      return this.show(message, 'error', duration, options);
    }
    warning(message, duration = 6000, options = {}) {
      return this.show(message, 'warning', duration, options);
    }
    info(message, duration = 5000, options = {}) {
      return this.show(message, 'info', duration, options);
    }
    loading(message, duration = 0, options = {}) {
      return this.show(message, 'loading', duration, options);
    }
  }
  let notificationSystem = new NotificationSystem();
  window.notificationSystem = notificationSystem;
  window.showNotification = {
    success: (message, duration, options) => notificationSystem.success(message, duration, options),
    error: (message, duration, options) => notificationSystem.error(message, duration, options),
    warning: (message, duration, options) => notificationSystem.warning(message, duration, options),
    info: (message, duration, options) => notificationSystem.info(message, duration, options),
    loading: (message, duration, options) => notificationSystem.loading(message, duration, options)
  };
</script>
<style>
  @keyframes progress {
    from {
      width: 100%;
    }
    to {
      width: 0%;
    }
  }
  .notification-item {
    backdrop-filter: blur(20px);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
  }
  .notification-item:hover {
    transform: translateX(-2px) scale(1.01);
    box-shadow: 0 15px 35px -5px rgba(0, 0, 0, 0.4);
  }
  .notification-item:hover .notification-progress {
    animation-play-state: paused;
  }
  @media (max-width: 640px) {
    #notification-container {
      top: 0.75rem;
      right: 0.75rem;
      left: 0.75rem;
      max-width: none;
      space-y: 0.5rem;
    }
    .notification-item {
      padding: 0.75rem;
    }
    .notification-item:hover {
      transform: translateX(-1px) scale(1.005);
    }
  }
  @media (min-width: 641px) and (max-width: 1024px) {
    #notification-container {
      top: 1rem;
      right: 1rem;
      max-width: 20rem;
    }
  }
  @media (min-width: 1025px) {
    #notification-container {
      top: 1rem;
      right: 1rem;
      max-width: 24rem;
    }
  }
</style>