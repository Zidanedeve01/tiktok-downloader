---
import { downloadVideo } from '../utils/api.ts';
export interface Props {
  url?: string;
}
const { url = '' } = Astro.props;
---
<div class="bg-black border border-white rounded-xl sm:rounded-2xl lg:rounded-3xl p-6 sm:p-8 lg:p-10">
  <div class="text-center mb-6 sm:mb-8">
    <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold text-white mb-2 sm:mb-3 lg:mb-4">
      <i class="fas fa-download mr-2 sm:mr-3 text-white"></i>
      <span class="text-white">Download Video TikTok</span>
    </h2>
    <p class="text-white/70 text-sm sm:text-base lg:text-lg">Paste URL TikTok untuk download video tanpa watermark</p>
  </div>
  <form id="download-form" class="space-y-4 sm:space-y-6">
    <div>
      <label for="tiktok-url" class="block text-sm font-medium text-white/90 mb-2">
        URL Video TikTok
      </label>
      <div class="relative">
        <input
          type="url"
          id="tiktok-url"
          name="url"
          value={url}
          placeholder="https://www.tiktok.com/@username/video/1234567890"
          class="w-full px-3 sm:px-4 py-2 sm:py-3 bg-black border border-white rounded-lg sm:rounded-xl text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white focus:border-white transition-all duration-300 text-sm sm:text-base"
          required
        />
        <div class="absolute inset-y-0 right-0 flex items-center pr-3">
          <i class="fas fa-link text-white/50"></i>
        </div>
      </div>
    </div>
    <div class="flex gap-2 sm:gap-4">
      <button
        type="submit"
        id="download-btn"
        class="flex-1 bg-white hover:bg-white/90 text-black font-semibold py-3 sm:py-4 px-4 sm:px-6 rounded-lg sm:rounded-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed border border-white"
      >
        <i class="fas fa-download mr-2"></i>
        <span id="download-text" class="text-sm sm:text-base">Download Video</span>
      </button>
      <button
        type="button"
        id="clear-btn"
        class="px-4 sm:px-6 py-3 sm:py-4 bg-black border border-white hover:bg-white hover:text-black text-white rounded-lg sm:rounded-xl transition-all duration-300"
      >
        <i class="fas fa-times text-sm sm:text-base"></i>
      </button>
    </div>
  </form>
  <div id="loading-state" class="hidden mt-4 sm:mt-6">
    <div class="flex items-center justify-center space-x-2 sm:space-x-3">
      <div class="animate-spin rounded-full h-4 w-4 sm:h-6 sm:w-6 border-b-2 border-white"></div>
      <span class="text-white/80 text-sm sm:text-base">Memproses video...</span>
    </div>
  </div>
  <div id="error-state" class="hidden mt-4 sm:mt-6 p-3 sm:p-4 bg-black border border-white rounded-lg sm:rounded-xl">
    <div class="flex items-start space-x-2 sm:space-x-3">
      <i class="fas fa-exclamation-triangle text-white mt-1 text-sm sm:text-base"></i>
      <div>
        <h4 class="text-white font-semibold mb-1 text-sm sm:text-base">Error</h4>
        <p id="error-message" class="text-white/80 text-xs sm:text-sm"></p>
      </div>
    </div>
  </div>
  <div id="success-state" class="hidden mt-4 sm:mt-6 p-3 sm:p-4 bg-black border border-white rounded-lg sm:rounded-xl">
    <div class="flex items-start space-x-2 sm:space-x-3">
      <i class="fas fa-check-circle text-white mt-1 text-sm sm:text-base"></i>
      <div>
        <h4 class="text-white font-semibold mb-1 text-sm sm:text-base">Berhasil!</h4>
        <p id="success-message" class="text-white/80 text-xs sm:text-sm"></p>
      </div>
    </div>
  </div>
</div>
<script>
  class VideoForm {
    constructor() {
      this.form = document.getElementById('download-form');
      this.urlInput = document.getElementById('tiktok-url');
      this.downloadBtn = document.getElementById('download-btn');
      this.downloadText = document.getElementById('download-text');
      this.clearBtn = document.getElementById('clear-btn');
      this.loadingState = document.getElementById('loading-state');
      this.errorState = document.getElementById('error-state');
      this.successState = document.getElementById('success-state');
      this.errorMessage = document.getElementById('error-message');
      this.successMessage = document.getElementById('success-message');
      this.init();
    }
    init() {
      this.form?.addEventListener('submit', (e) => this.handleSubmit(e));
      this.clearBtn?.addEventListener('click', () => this.clearForm());
      this.urlInput?.addEventListener('input', () => this.validateUrl());
    }
    async handleSubmit(e: Event) {
      e.preventDefault();
      const url = this.urlInput?.value.trim();
      if (!url) return;
      this.showLoading();
      this.hideMessages();
      try {
        const result = await downloadVideo(url);
        if (result.success && result.data) {
          this.showSuccess('Video berhasil diproses!');
          this.handleVideoData(result.data);
        } else {
          this.showError(result.error || 'Gagal memproses video');
        }
      } catch (error) {
        console.error('Download error:', error);
        this.showError('Terjadi kesalahan saat memproses video');
      } finally {
        this.hideLoading();
      }
    }
    handleVideoData(videoData: any) {
      const downloadLinks = this.createDownloadLinks(videoData);
      this.showDownloadOptions(downloadLinks);
    }
    createDownloadLinks(videoData: any) {
      const links = [];
      if (videoData.download.no_watermark) {
        links.push({
          url: videoData.download.no_watermark,
          label: 'Download Tanpa Watermark',
          icon: 'fas fa-download',
          class: 'bg-white hover:bg-white/90 text-black border border-white'
        });
      }
      if (videoData.download.watermark) {
        links.push({
          url: videoData.download.watermark,
          label: 'Download Dengan Watermark',
          icon: 'fas fa-download',
          class: 'bg-black hover:bg-white hover:text-black text-white border border-white'
        });
      }
      return links;
    }
    showDownloadOptions(links: any[]) {
      const container = document.createElement('div');
      container.className = 'mt-6 space-y-3';
      container.innerHTML = '<h4 class="text-white font-semibold mb-4 text-center">Pilih Format Download:</h4>';
      links.forEach(link => {
        const button = document.createElement('a');
        button.href = link.url;
        button.download = '';
        button.target = '_blank';
        button.className = `block w-full ${link.class} font-semibold py-3 px-6 rounded-lg sm:rounded-xl transition-all duration-300 transform hover:scale-105 text-center`;
        button.innerHTML = `<i class="${link.icon} mr-2"></i>${link.label}`;
        container.appendChild(button);
      });
      this.successState?.appendChild(container);
    }
    validateUrl() {
      const url = this.urlInput?.value.trim();
      const isValid = this.isValidTikTokUrl(url);
      if (url && !isValid) {
        this.urlInput?.classList.add('border-white');
        this.urlInput?.classList.remove('border-white/50');
      } else {
        this.urlInput?.classList.remove('border-white');
        this.urlInput?.classList.add('border-white/50');
      }
    }
    isValidTikTokUrl(url: string): boolean {
      const tiktokPattern = /^https?:\/\/(www\.)?(tiktok\.com|vm\.tiktok\.com|vt\.tiktok\.com)/;
      return tiktokPattern.test(url);
    }
    showLoading() {
      this.loadingState?.classList.remove('hidden');
      this.downloadBtn.disabled = true;
      this.downloadText.textContent = 'Memproses...';
    }
    hideLoading() {
      this.loadingState?.classList.add('hidden');
      this.downloadBtn.disabled = false;
      this.downloadText.textContent = 'Download Video';
    }
    showError(message: string) {
      this.errorState?.classList.remove('hidden');
      this.errorMessage.textContent = message;
    }
    showSuccess(message: string) {
      this.successState?.classList.remove('hidden');
      this.successMessage.textContent = message;
    }
    hideMessages() {
      this.errorState?.classList.add('hidden');
      this.successState?.classList.add('hidden');
    }
    clearForm() {
      this.urlInput.value = '';
      this.hideMessages();
      this.validateUrl();
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    new VideoForm();
  });
</script>
<style>
  .download-form {
    animation: slideUp 0.5s ease-out;
  }
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .rate-limit-warning {
    animation: pulse 2s infinite;
  }
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }
</style>